name: ci

on:
  push:
    branches:
      - "master"

env:
  RUNNER_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/clarkzjw/dashjs-runner
  DASHJS_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/clarkzjw/dashjs
  STAT_SERVER_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/clarkzjw/dashjs-stats-server
  LIVESIM_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/clarkzjw/dashjs-livesim2
  NGINX_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/clarkzjw/dashjs-nginx
  PYODIDE_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/clarkzjw/dashjs-pyodide
  TAG: master

jobs:
  runner:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push Runner
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-runner
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.RUNNER_IMAGE }}:${{ env.TAG }}
  dashjs:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push DASHJS
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-dashjs
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DASHJS_IMAGE }}:${{ env.TAG }}
  stat-server:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push stat-server
        uses: docker/build-push-action@v4
        with:
          context: stats-server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.STAT_SERVER_IMAGE }}:${{ env.TAG }}
  livesim2:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push livesim2
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-livesim2
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.LIVESIM_IMAGE }}:${{ env.TAG }}
  nginx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push nginx
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-nginx
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.NGINX_IMAGE }}:${{ env.TAG }}
      -
        name: Build and push nginx-emulation
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-nginx-emulation
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.NGINX_IMAGE }}:emulation
  pyodide:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push pyodide
        uses: docker/build-push-action@v4
        with:
          context: webassembly
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.PYODIDE_IMAGE }}:${{ env.TAG }}
